@Tutorial(time: 5) {
    @Intro(title: "Differentiable Objects") {
        `@differentiable` functions require that their arguments and results conform to the `Differentiable` protocol. Some of the standard library types such as `Float`, `Double`, `Array.DifferentiableView` already conform to this protocol. 
        In this tutorial we will go into writing our own `Differentiable` types in order to write more complex `@differentiable` functions.
    }
    
    @Section(title: "Marking objects as `Differentiable`") {
        @ContentAndMedia {
            How to mark objects as `Differentiable` and use them as arguments to `@differentiable` functions
        }
        
        @Steps {
            # More Coming Soon
        }
    }
    
    @Section(title: "Writing custom `TangentVector`s") {
        @ContentAndMedia {
            How to write custom `TangentVector`s to make your types differentiable
        }
        
        @Steps {
            # Coming Soon
        }
    }
        
    @Section(title: "Make 3rd party objects `Differentiable`") {
        @ContentAndMedia {
            How to extend 34d party objects to make them `Differentiable`.
        }
        
        @Steps {
            # Coming Soon
        }
    }
}
